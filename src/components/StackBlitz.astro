---
import type { EmbedOptions } from '@stackblitz/sdk';

interface Props {
	projectId?: string | undefined;
	localProjectId?: string | undefined;
	options: EmbedOptions;
}
const { projectId, localProjectId, options } = Astro.props;

if (!projectId && !localProjectId) {
	throw new Error(
		'Missing props for `<StackBlitz>` component. One of `projectId` or `localProjectId` is required.'
	);
}
---

<stack-blitz
	data-project-id={projectId}
	data-local-project-id={localProjectId}
	data-embed-options={JSON.stringify(options)}
>
	<div class="sb-iframe"></div>
</stack-blitz>

<script>
	import sdk, { type EmbedOptions } from '@stackblitz/sdk';
	import { HEAD } from 'astro:env/client';

	class StackBlitz extends HTMLElement {
		constructor() {
			super();
			const { projectId, localProjectId, embedOptions } = this.dataset;
			try {
				const container = this.querySelector('div');
				if (!container) return;
				const options: EmbedOptions = JSON.parse(embedOptions || '{}');
				if (projectId) {
					sdk.embedProjectId(container, projectId, options);
				} else if (localProjectId) {
					const repoPath = `delucis/starlight-examples/tree/${HEAD}/examples/${localProjectId}`;
					sdk.embedGithubProject(container, repoPath, options);
				}
			} catch {}
		}
	}
	customElements.define('stack-blitz', StackBlitz);
</script>

<style>
	stack-blitz {
		display: block;
	}

	.sb-iframe {
		margin-block: 2rem;
		border: none;
		background-color: var(--sl-color-gray-6);
		box-shadow: var(--sl-shadow-lg);
		--vheight: 100vh;
		height: min(
			calc(var(--vheight) - var(--sl-nav-height) - var(--sl-content-pad-x)),
			40rem
		) !important;
	}
	@supports (height: 100svh) {
		.sb-iframe {
			--vheight: 100svh;
		}
	}
</style>
